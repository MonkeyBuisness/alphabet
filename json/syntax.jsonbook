{"cells":[{"languageId":"markdown","content":"# Синтаксис и базовые правила\n\nДля тех, кто работал, или немного знаком с языком **Javascript**, не составит труда разобраться с синтаксисом и устройством формата JSON.","kind":1},{"languageId":"markdown","content":"В общем виде, JSON предназначен для описания сущностей в Объектно-Ориентированном стиле.\nВсе атрибуты (характеристики, свойства) описываемого объекта должны быть заключены в `{}`.\n\nНапример, `{}` описывает пустой объект, который не содержит никаких свойств.\n\nНазвания свойств, расположенных внутри объекта, должны быть заключены в `\"\"` (двойные кавычки).\n\nЗначения этих свойств задаются справа относительно названия свойства после символа `:` (двоеточие).\n\nВ качестве значения в JSON могут выступать следующие конструкции:\n- **строка** (любая последовательность символов, заключённая в `\"\"`)\n- **число** (любое целое, либо вещественное число. Поддерживаются также знаки `+` и `-` для указания того, положительное это число, либо нет. В JSON также присутствует поддержка записи чисел в экспоненциальной форме, например `2.99792458e8`)\n- **объект** (вложенный объект, содержащий свои собственные свойства, задается `{}`)\n- **массив** (список значений, любой из доступных в JSON конструкций, разделенный символом `,` и закюченный в `[]`)\n- **булевское значение** (может быть только `true` или `false`)\n- `null` (зарезервированное ключевое слово, которое говорит о том, что свойство имеет неопределенное значение, или не содержит его вовсе)","kind":1},{"languageId":"markdown","content":"## Пример\n\nДавайте попробуем описать какой-нибудь объект при помощи JSON. В качестве \"жертвы\" выберем кота.\n\n![cat](https://imagesvc.meredithcorp.io/v3/jumpstartpure/image?url=https://cf-images.us-east-1.prod.boltdns.net/v1/static/6157254766001/0779af9a-12bb-4893-aaa8-e82f7048e2e0/48de5193-4610-4378-92a1-23aba74bf1b0/1280x720/match/image.jpg\u0026w=1280\u0026h=720\u0026q=90\u0026c=cc)","kind":1},{"languageId":"markdown","content":"У кота есть цвет (`color`) и, будем надеятся, имя (`name`). Обе эти характеристики мы должны заключить в `{}` объекта **КОТ**, дав им название (желательно на английском) и указав им значения. В данном случае, в качестве значений будут выступать **строки**.\n\n```json\n{\n    \"name\": \"Tom\",\n    \"color\": \"white\"\n}\n```\n\n\u003e Обратите внимание, что все свойства внутри объекта разделяются между собой символом `,`.","kind":1},{"languageId":"markdown","content":"Далее укажем коту возраст (`age`) и вес (`weight`). Обе эти характеристики будут **числовыми**.\n\n```json\n{\n    \"name\": \"Tom\",\n    \"color\": \"white\",\n    \"age\": 3,\n    \"weight\": 2.8\n}\n```\n\n\u003e Обратите внимание, что все значения кроме строковых, **НЕ** берутся в `\"\"` (двойные кавычки).","kind":1},{"languageId":"markdown","content":"У кота есть хозяин (`owner`). Давайте добавим информацию и о нем: его имя (`name`), возраст (`age`) и пол (`gender`).\n\nПроблема состоит в том, что мы не может поместить все эти поля в одно значение... Или можем?!\n\n```json\n{\n    \"name\": \"Tom\",\n    \"color\": \"white\",\n    \"age\": 3,\n    \"weight\": 2.8,\n    \"owner\": {\n        \"name\": \"John Smith\",\n        \"age\": 39,\n        \"gender\": \"male\"\n    }\n}\n```\n\nКак видите, в качестве значения свойства может выступать другой объект, что значительно упрощает структурирование любого JSON документа.","kind":1},{"languageId":"markdown","content":"Скажем, было бы неплохо добавить коту список еды (`food`), которой он любит полакомиться.\n\nДля этого используем **массив**, чтобы поместить в него сразу несколько значений.\n\n```json\n{\n    \"name\": \"Tom\",\n    \"color\": \"white\",\n    \"age\": 3,\n    \"weight\": 2.8,\n    \"owner\": {\n        \"name\": \"John Smith\",\n        \"age\": 39,\n        \"gender\": \"male\"\n    },\n    \"food\": [\"fish\", \"milk\", \"meat\"]\n}\n```\n\n\u003e В JSON нет строгого правила, чтобы в массиве располагались элементы только одного типа. Например, массив `[123, \"hello\", true]` является валидным с точки зрения документации. Однако, если вы будуте преобразовывать такой массив в строготипизированном языке, вроде Java, то на этапе преобразования, возникнет ошибка, т.к. многие языки не поддерживают наличие разнотипных элементов в массиве.","kind":1},{"languageId":"markdown","content":"Наш кот любит играть. И наверняка у него есть любимая игрушка (`hasFavoriteToy`). И как любой кот, наш не либит купаться (`likesWash`).\n\nДавайте отразим это через JSON:\n\n```json\n{\n    \"name\": \"Tom\",\n    \"color\": \"white\",\n    \"age\": 3,\n    \"weight\": 2.8,\n    \"owner\": {\n        \"name\": \"John Smith\",\n        \"age\": 39,\n        \"gender\": \"male\"\n    },\n    \"food\": [\"fish\", \"milk\", \"meat\"],\n    \"hasFavoriteToy\": true,\n    \"likesWash\": false\n}\n```","kind":1},{"languageId":"markdown","content":"Коты очень фотогеничны. Но наш кот - исключение. Мы бы могли добавить новое поле, в котором бы в качестве значения указали ссылку на его фото в `Catogram`, но вместо это придется довольствоваться значением `null` (неопределено).\n\n```json\n{\n    \"name\": \"Tom\",\n    \"color\": \"white\",\n    \"age\": 3,\n    \"weight\": 2.8,\n    \"owner\": {\n        \"name\": \"John Smith\",\n        \"age\": 39,\n        \"gender\": \"male\"\n    },\n    \"food\": [\"fish\", \"milk\", \"meat\"],\n    \"hasFavoriteToy\": true,\n    \"likesWash\": false,\n    \"photo\": null\n}\n```\n\nВот так будет выглядет окончательный вариант `JSON` для кота:","kind":1},{"languageId":"json","content":"{\n\t\"name\": \"Tom\",\n\t\"color\": \"white\",\n\t\"age\": 3,\n\t\"weight\": 2.8,\n\t\t\"owner\": {\n\t\t\"name\": \"John Smith\",\n\t\t\"age\": 39,\n\t\t\"gender\": \"male\"\n\t},\n\t\"food\": [\"fish\", \"milk\", \"meat\"],\n\t\"hasFavoriteToy\": true,\n\t\"likesWash\": false,\n\t\"photo\": null\n}","kind":2},{"languageId":"markdown","content":"Как видите, нет абсолютно ничего сложного в описании и понимании JSON. Самое главное - следить за правильной расстановкой запятых для разделения свойств объекта, и не забывать, что названия свойств берутся в двойные кавычки.","kind":1},{"languageId":"markdown","content":"Но что, если нам необходимо описать сразу несколько объектов? Например, мы хотим описать список языков программирования, который будет возвращать наш сервер по запросу. Если за один запрос мы сможем указать JSON с описанием только одного языка, то чтобы получить их все, необходимо будет сделать огромное количество запросов, чего сервер может просто не выдержать...\n\nДля этого в качестве `\"корневого\"` элемента в JSON может выступать массив (`[...]`).\n\nНапример, такой JSON будет абсолютно валидным с точки зрения документации:\n\n```json\n[1, 2, 3, 67, -8, 90]\n```\n\nИ такой:\n\n```json\n[true, false, false, true]\n```\n\nИ даже такой:\n\n```json\n[\n    {\n        \"language\": \"Java\",\n        \"creationYear\": 1995\n    },\n    {\n        \"language\": \"Python\",\n        \"creationYear\": 1991\n    },\n    {\n        \"language\": \"Kotlin\",\n        \"creationYear\": 2010\n    }\n]\n```","kind":1},{"languageId":"markdown","content":"## Лицензия\n\n[MIT](https://github.com/MonkeyBuisness/alphabet/blob/master/LICENSE)","kind":1},{"languageId":"markdown","content":"## Ссылки\n\n- [Онлайн редактор для валидации и форматирования JSON](https://jsonformatter.curiousconcept.com/)\n- [Типы данных в JSON](https://www.tutorialspoint.com/json/json_data_types.htm)\n- [Список публичных API для обмена данными с сервером в формате JSON](https://github.com/public-apis/public-apis)\n- [Работа с JSON в JavaScript](https://learn.javascript.ru/json)\n- [Пример конвертации XML в JSON](https://json.org/example.html)","kind":1},{"languageId":"markdown","content":"# Authors\n\n\u003cstyle\u003e\n    img[alt=avatar] {\n        width: 96px;\n        height: 96px;\n        object-fit: cover;\n        border-radius: 50%;\n    }\n\u003c/style\u003e\n\n\n\n|  | Name | About |\n|- |----- |------ |\n| ![avatar](https://github.com/MonkeyBuisness/alphabet/raw/master/.github/assets/me.jpg) | Artsem Hutarau\u003cbr /\u003e[More info](https://github.com/MonkeyBuisness) | Go developer, IT teacher |\n\n","kind":1}]}