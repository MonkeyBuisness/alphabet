{"cells":[{"languageId":"markdown","content":"# Примитивные типы данных, комментарии\n\nДавайте представим, что мы имеем следующий код, написанный на языке Java:\n\n```java\npackage main;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n    }\n}\n```\n\nЭтот код представляет из себя минимальный набор команд, необходимых для запуска любого Java-приложения.\nЕсли вы до этого не были знакомы ни с одним из языков программирования, то для вас будет непонятно, что значат приведенные выше синтаксические конструкции. Но давайте мы пока не будем беспокоиться об этом. Все описанные инструкции вы поймете по мерее дальнейшего изучения книги. На данный момент всё, что нас будет интересовать - это то, что выполнение нашей программы будет начинаться внутри `{}`, стоящих после конструкции `public static void main(String[] args)`.\n\nТакже для вывода информации на экран, мы будем использовать команду `System.out.println(...)`, полное назначение которой вы поймете чуть позже. \n\n## Комментарии\n\nОбщее назначение комментариев в коде - это убрать из процесса компиляции/интерпретации части кода, которые не должны быть выполнены, без удаления самого кода.\n\nВ Java предусмотрены 2 типа комментариев:\n\n- однострочный (задается `//`) - предназначен для комментирования одной строки в коде\n- многострочный (задается `/* */`) - предназначен для комментирования сразу нескольких строк в коде\n\nНапример, следующий фрагмент кода должен вывести на экран числа от `1` до `5`. Но, поскольку строки с выводом цифры `3` и `5` закомментированы, то после запуска на экране мы увидим только цифры `1`, `2` и `4`.","kind":1},{"languageId":"java","content":"package main;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        System.out.println(1);\n        System.out.println(2);\n        // System.out.println(3);\n        System.out.println(4);\n        // System.out.println(5);\n    }\n} \n","kind":2},{"languageId":"markdown","content":"\u003e Попробуйте самостоятельно закомментировать, либо наоборот раскомментировать оставшуюся часть строк, и посмотрите, как будет меняться вывод программы.","kind":1},{"languageId":"markdown","content":"Как вы заметили, Java ингорирует закомментированные строки программы, и пропускает процесс их интерпретации при выполнении. А это значит, что внутри комментариев может располагаться не только код, но и любой текст. Разработчики часто прибегают к использованию комментариев в коде, чтобы обозначить части программы, сложные для понимания другими программистами.\n\nДавайте добавим комментарии с пояснениями к предыдущему примеру:","kind":1},{"languageId":"java","content":"package main;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        /*\n            Здесь начинается программа.\n\n            Все строки с кодом, которые описаны ниже, будут выполнены последовательно,\n            одна за другой.\n\n            Суть данной программы - вывести на экран целые числа в диапазоне [1..5].\n        */\n\n        System.out.println(1);\n        System.out.println(2);\n        System.out.println(3);\n        System.out.println(4);\n        System.out.println(5);\n\n        // поскольку перед закрывающей } больше нет кода,\n        // то программа завершится.\n    }\n} \n","kind":2},{"languageId":"markdown","content":"## Представление данных в памяти\n\nРабота любой программы, написанной на любом языке программирования в частности сводится к тому, чтобы оперировать данными.\nДанные располагаются в [оперативной памяти](https://ru.wikipedia.org/wiki/%D0%9E%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D0%B0%D1%8F_%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D1%8C) устройства, на котором запущена программа.\n\nВся информация, которой оперирует запущенный код, представляет из себя набор [бит](https://ru.wikipedia.org/wiki/%D0%91%D0%B8%D1%82), который затем трансформируется в набор [байт](https://ru.wikipedia.org/wiki/%D0%91%D0%B0%D0%B9%D1%82).\n\nДругими словами, из-за особенности архитектуры современных вычислительных устройств (персональных компьютеров, ноутбуков, смартфонов, игровых приставок и т.п.), данные в памяти хранятся как набор нулей и единиц, которые каждая программа интерпретирует по своему.","kind":1},{"languageId":"markdown","content":"Например, имея следующий набор бит в памяти в [2-й системе счисления](https://ru.wikipedia.org/wiki/%D0%94%D0%B2%D0%BE%D0%B8%D1%87%D0%BD%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%81%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F):\n\n```\n1010000000111000\n```\n\nПрограмма может взять всю последовательность как одно значение, и тогда она будет оперировать числом `41016` (1010000000111000 в [10-й системе счисления](https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D1%81%D1%8F%D1%82%D0%B8%D1%87%D0%BD%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%81%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F#:~:text=%D0%94%D0%B5%D1%81%D1%8F%D1%82%D0%B8%CC%81%D1%87%D0%BD%D0%B0%D1%8F%20%D1%81%D0%B8%D1%81%D1%82%D0%B5%CC%81%D0%BC%D0%B0%20%D1%81%D1%87%D0%B8%D1%81%D0%BB%D0%B5%CC%81%D0%BD%D0%B8%D1%8F%20%E2%80%94%20%D0%BF%D0%BE%D0%B7%D0%B8%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F%20%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0,%2C%200%2C%20%D0%BD%D0%B0%D0%B7%D1%8B%D0%B2%D0%B0%D0%B5%D0%BC%D1%8B%D0%B5%20%D0%B0%D1%80%D0%B0%D0%B1%D1%81%D0%BA%D0%B8%D0%BC%D0%B8%20%D1%86%D0%B8%D1%84%D1%80%D0%B0%D0%BC%D0%B8.)).\n\nИли разбить эту последовательность на `2 равные части` по `8` бит каждая, и оперировать уже 2-мя числами:\n- `160` - 10100000 в 10-й системе\n- `56`  - 00111000 в 10-й системе\n\nи т.д. Главное - размер последовательности бит **должен быть кратен 8**. Максимальная последовательность, которая может быть взята программой, ограничивается [разрядностью процессора](https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D1%88%D0%B8%D0%BD%D0%BD%D0%BE%D0%B5_%D1%81%D0%BB%D0%BE%D0%B2%D0%BE) или операционной системы. Для 64-х разрядной архитектуры - это `64` бита, для 32-х - это `32` бита и т.д.\n\n### НО НЕ ВОЛНУЙТЕСЬ!\n\nНа самом деле, используя Java, вам не придется напрямую взаимодействовать с двоичными данными. Вы можете задавать значения в 10-й системе счисления, которая наиболее привычна человеку для понимания. А [компилятор](https://ru.wikipedia.org/wiki/Java_Development_Kit) языка сам переведет все заданные значения в двоичный формат.\n\n\u003e Тем не менее, операции над двоичными данными средствами Java совершать можно. Об этом более подробно вы можете узнать в главе 1 в разделе `Побитовые операторы`.","kind":1},{"languageId":"markdown","content":"## Переменные\n\nНельзя просто так взять Java... и записать значение в память.\n\n![mem](https://github.com/MonkeyBuisness/alphabet/raw/master/.github/assets/the-lord-of-the-rings-mem.jpg)\n\nДля хранения данных в программе предназначены [переменные](https://ru.wikipedia.org/wiki/%D0%9F%D0%B5%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%B0%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)). Переменная представляет собой именованную область памяти, которая хранит значение определенного типа. Другими словами, чтобы не заставлять программиста работать с реальными (физическими) [адресами в памяти](https://ru.wikipedia.org/wiki/%D0%90%D0%B4%D1%80%D0%B5%D1%81%D0%B0%D1%86%D0%B8%D1%8F_%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D0%B8), и код программы не выглядел как набор разрозненных чисел, над которыми совершаются какие-то операции, разработчики языка ввели такое понятие как `переменная`.\n\nОна предоставляет новый уровень абстракции для обработки данных: вместо запоминания адреса (номера ячейки памяти, в которой хранятся данные), мы можем задать этой ячейке имя. Да, обычное имя, которое (_желательно_) должно быть написано на английском языке, содержать только цифры и буквы английского алфавита. Если название переменной состоит из нескольких слов, то они должны быть объединены в одно, либо разделены символом `_` (нижнее подчеркивание).  Причем **название переменной не может начинаться с цифры**, но сама цифра(-ы) может присутствовать в названии переменной. Например, такие названия будут валидными:\n\n- `name`, `age`, `MyFavoriteColor`, `all4you`, `important_value`, `___superImportant_Value` и т.п.\n\nА такие - нет:\n\n- `2many` (название начинается с цифры)\n- `cat name` (используется недопустимый символ (пробел))\n- `dog-color` (используется недопустимый символ `-` (дефис))\n\n\u003e Хорошим тоном будет то, чтобы задавать название переменных в стиле нижнего [camel-case](https://ru.wikipedia.org/wiki/CamelCase), когда с прописной буквы пишутся все слова, кроме первого. Это общепризнанный негласный формат именования переменных в Java. Например, если вы хотите создать переменную содержащую в названии слова `first negative number`, то лучше это сделать как `firstNegativeNumber`, но никак не `first_negative_number` или `FirstNegativeNumber`.\n\n\u003e Возьмите за правило давать переменным такие названия, которые будут отражать суть хранимых в них данных. Например, название переменной `xy5678` - не информативно, а `squareRoot` - более чем. Таким образом вы избежите ошибок в коде, и вашим коллегам, которые работают с вами над одним проектом, будет легче понять ваши изменения, и внести правки в будущем, если потребуется.\n\nПеременные объявляются следующим образом:\n\n```\nтип_данных имя_переменной [= начальное_значение_переменной];\n```\n\nГде `тип_данных` - это одно из зарезервированных слов, определяющих какого размера будет переменная (какой объем данных она может содержать), и какие значения туда можно поместить.","kind":1},{"languageId":"markdown","content":"## Примитивные типы данных\n\nВ приведенной ниже таблице вы можете увидеть список всех доступных [примитивных типов данных в Java](https://ru.wikibooks.org/wiki/Java/%D0%A2%D0%B8%D0%BF%D1%8B_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85):\n\n| Тип данных | Описание                                   | Диапазон допустимых значений                           | Занимаемый объем памяти |\n| ---------- | ------------------------------------------ | ------------------------------------------------------ | ----------------------: |\n| `byte`     | хранит целое число                         | от **-128** до **127**                                 | `1` байт                |\n| `short`    | хранит целое число                         | от **-32768** до **32767**                             | `2` байта               |\n| `int`      | хранит целое число                         | от **-2147483648** до **2147483647**                   | `4` байта               |\n| `long`     | хранит целое число                         | от **-9223372036854775808** до **9223372036854775807** | `8` байт                |\n| `boolean`  | хранит логическое значение                 | **true** или **false**                                 | `1` байт                |\n| `float`    | хранит вещественное число                  | от **-3.4\\*10^38** до **3.4\\*10^38**                   | `4` байта               |\n| `double`   | хранит вещественное число                  | от **±4.9\\*10^-324** до **±1.8\\*10^308**               | `8` байт                |\n| `char`     | хранит одиночный символ в кодировке UTF-16 | от **0** до **65535**                                  | `2` байта               |\n\n\u003e Почему *примитивные*?! Все очень просто. В Java примитивными называются те типы, которые уже есть в стандартной версии языка, и которые не обладают свойством [ссылочности](http://cyclowiki.org/wiki/%D0%A1%D1%81%D1%8B%D0%BB%D0%BA%D0%B0_(Java)). О ссылочных типах вы можете более подробно узнать в главе 3 в разделе `Ссылочность`.\n\nКак вы заметили, тип данных определяет не только **фиксированный** объем памяти для переменной, но и задает ограничение на диапазон значений.\n\nДля всех числовых значений, кроме `char`, этот дипазаон \"сдвинут\" на 1 бит в пользу знака. Другими словами, если мы возьмем 1 байт (8 бит) иформации, например, при создании переменной типа `byte`, то мы можем заметить, что минимальные число, которое мы может туда поместить это:\n\n```\n00000000 = 0 (в 10-й системе счисления)\n```\n\nа максимальное - это:\n\n```\n11111111 = 255 (в 10-й системе счисления)\n```\n\nНо Java предлагает совсем иной диапазон (**[-128...127]**). Это сделано специально, чтобы дать программистам возможность хранить отрицательные значения.\nВо всех примитивных типах данных, которые содержат число, старший (первый слева-направо) бит отведен под знак числа. Если в нем записан `0`, то Java воспринимает такое число как положительное (со знаком `+`). Если `1` - то как отрицательное (со знаком `-`). И для хранения \"полезных\" данных доступно всегда на 1 бит меньше. Зная это, мы можем пересчитать диапазон для типа `byte`:\n\n```\nМинимальное значение:\n\n1 1111111 = -127 (в 10-й системе счисления)\n^\nне используется, отведен под знак. Число отрицательное, т.к. старший бит равен 1\n```\n\n```\nМаксимальное значение:\n\n0 1111111 = 127 (в 10-й системе счисления)\n^\nне используется, отведен под знак. Число положительное, т.к. старший бит равен 0\n\n```\n\nПолучившийся диапазон - **[-127..127]**. Но, согласно документации, оригинальный диапазон для `byte` начинается с `-128`, а не c `-127`.\nА все дело в том, что Java особенным образом интерпретирует отрицительные числа. Если в ячейке памяти старший бит выставлен в 1, то Java не исключает его из интерпретации, а вместо этого \"помечает\" число как отрицательное, и воспринимает этот бит как начало двоичной последовательности. Таким образом достигается увеличение диапазона хранимых чисел на 1. В этом случае, минимальный диапазон для типа `byte` будет не `1 1111111`, а `1 0000000`, что даст нам **-128** в итоге.\n\n\u003e Стоит отметить, что при написании кода стоит тщательно подходить в выбору типа данных. Например, если вы хотите создать переменную, в которой будет храниться возраст человека ([0..1xx] лет), то стоит выбрать тип `byte` или `short`, но не `int` или `long`. Тем самым, вы сократите количество памяти, которое будет \"съедать\" ваша программа во время выполнения, и обеспечите более рациональный и оптимальный расход ресурсов вычислительного устройства.","kind":1},{"languageId":"markdown","content":"Один из типов, который может хранить целые числа, выбивается из общего принципа. Это тип `char`. В него мы **не можем** сохранить отрицательное значение. Этот тип предназначен для хранения одиночных символов, таких как `A`, `b`, `$`, `!` и т.д. Возникает логичный вопрос: как Java способна хранить в памяти символы (буквы, цифры, знаки препинания и т.д.), если сама память - это набор бит (ноликов и единичек)?\n\nВсе очень просто. Каждый символ имеет свой порядковый номер. Этот порядковый номер задан в [таблице кодировки UTF-16](https://www.fileformat.info/info/charset/UTF-16/list.htm). Например, для символа `W` - это 87, для `\u0026` - 38 и т.д. Т.о., каждый раз, когда мы сохраняем какой-то символ в память, Java автоматически определяет его номер и записывает в память число. А при чтении из памяти, она наоборот, читает код символа, но отображает на экране его текстовое представление в виде понятного человеку символа.","kind":1},{"languageId":"markdown","content":"## Переменные на практике\n\nДавайте перейдем к использованию переменных в коде.\n\nПриведенный ниже фрагмент кода демонстрирует как можно создать переменную каждого примитивного типа","kind":1},{"languageId":"java","content":"package main;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        // создание переменных, содержащих целые числа.\n        byte a;\n        short b;\n        int c;\n        long d;\n\n        // создание переменных, содержащих числа с плавающей точкой.\n        float e;\n        double f;\n\n        // создание переменной, содержащей логическое значение.\n        boolean g;\n\n        // создание переменной, содержащей символ.\n        char h;\n    }\n} \n","kind":2},{"languageId":"markdown","content":"\u003e В Java при создании переменной ей присваивается значение по умолчанию, которое равно `0` для численных типов, и `false` для логического типа.\n\nЕсли нам необходимо присвоить значение переменной сразу при создании, то для этого необходимо использовать оператор `=` (присвоение), после которого указать **допустимое значение** для данного типа.","kind":1},{"languageId":"java","content":"package main;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        // создание переменной типа int и присвоение ей значения 123.\n        int i = 123;\n\n        // вывод переменной на экран.\n        System.out.println(i);\n    }\n} \n","kind":2},{"languageId":"markdown","content":"Если попытаться присвоить переменной значение, которое \"не подходит\" для заданного типа, то будет ошибка.","kind":1},{"languageId":"java","content":"package main;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        // создание переменной типа boolean и присвоение ей значения 123.\n        boolean b = 123; // ОШИБКА! Переменной типа boolean можно присвоить только значение true или false.\n\n        // вывод переменной на экран.\n        System.out.println(b);\n    }\n} \n","kind":2},{"languageId":"markdown","content":"В Java есть одна неприятная особенность, связанная с присвоением значений типам `float` и `long`. Давайте попробуем запустить следующий код:","kind":1},{"languageId":"java","content":"package main;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        // создание переменной типа float и присвоение ей значения 3.1415.\n        float pi = 3.14;\n\n         // создание переменной типа long и присвоение ей значения 10000000000.\n        long bigNumber = 10000000000;\n    }\n} \n","kind":2},{"languageId":"markdown","content":"Мы видим, что компилятор не может присвоить значения для данных типов, хотя они подходят по допустимому диапазону. Все дело в том, что Java автоматически воспринимает все числовые целочисленные константы в коде (`123`, `10000000`, `0` и т.п.) как тип `int`, а все вещественные (`3.14`, `0.25`, `0.0` и т.п.) - как тип `double`.\n\nВ связи с этим, когда мы пытаемся присвоить переменной `float pi` значение `3.1415`, это значение в памяти хранится как `double`, и не может быть присвоено типу `float`. Похожая ситуация с типом `long`: число `10000000000` хранится в памяти как `int`, и просто не помещается в допустимый диапазон этого типа.\n\nЧтобы решить эту проблему, необходимо добавить в конец вещественного числа латинскую букву `f`, если мы хотим воспринимать это значение как `float`, или `l`, если мы хотим воспинимать целое число как `long`.\n\nДавайте исправим это для предыдущего примера:","kind":1},{"languageId":"java","content":"package main;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        float  pi  = 3.14f;  // все хорошо, т.к. в конце числа присутствует буква f.\n        double pi2 = 3.1415; // все хорошо, т.к. число 3.1415 без f на конце воспринимается как тип double\n\n        \n        long bigNumber  = 10000000000l; // все хорошо, т.к. в конце числа присутствует буква l.\n        int  bigNumber2 = 1450;         // все хорошо, т.к. число 1450 без l на конце воспринимается как тип int\n\n        // вывод переменных на экран.\n        System.out.println(pi);\n        System.out.println(pi2);\n        System.out.println(bigNumber);\n        System.out.println(bigNumber2);\n    }\n} \n","kind":2},{"languageId":"markdown","content":"\u003e Для сокращения кода, можно также создавать несколько переменных одного и того же типа в одну строку, разделяя их `,` (запятой). Напимер, код\n\n```java\nint a = 4, b, c = 8;\n```\n\n\u003e создает 3 переменных типа `int`, при этом переменной `a` присваивается значение `4`, переменной `c` значение `8`, а переменная `b` остается без начальной инициализации, следовательно ее значение будет равно `0` по умолчанию.","kind":1},{"languageId":"markdown","content":"## Область видимости переменных\n\nДавайте поэкспериментируем, и попробуем создать переменные с одинаковыми именами:","kind":1},{"languageId":"java","content":"package main;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        float  pi = 3.14f;\n        double pi = 3.1415;\n    }\n} \n","kind":2},{"languageId":"markdown","content":"При запуске такого кода мы увидим ошибку, говорящую нам о том, что переменная `pi` уже объявлена и не может быть повторно использована для именования переменной типа `double`.\n\nТакой способ \"защиты\" программы от повторного создания переменных с одним именем называется `экранированием`, которое определяет [область видимости](https://www.fandroid.info/peremennye-i-oblast-vidimosti/) переменной.\n\nОбласть видимости в программе на Java задается при помощи `{}`. Любая переменная, объявленная внутри `{}`, будет доступна только внутри этих фигурных скобок и во всех фигурных скобках, находящихся внутри (дочерних блоках кода).\n\nСледующий пример более детально описывает конфликты, которые могут возникнуть в программе при повторном использовании переменных с одинаковым именем в рамках одних `{}` (одного блока кода).","kind":1},{"languageId":"java","content":"package main;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        float x = 45.89f;\n\n        // ОШИБКА!\n        // Переменная x уже объявлена в рамках текущих фигурных скобок.\n        int x = 1000;\n    }\n} \n","kind":2},{"languageId":"markdown","content":"Попробуйте самостоятельно исправить код, чтобы при запуске не возникало ошибки.","kind":1},{"languageId":"markdown","content":"## Лицензия\n\n[MIT](https://github.com/MonkeyBuisness/alphabet/blob/master/LICENSE)","kind":1},{"languageId":"markdown","content":"## Ссылки\n\n- [Работа с примитивными типами в Java](https://java-master.com/primitive-types-of-data-in-java/)\n- [Как переменные примитивных типов хранятся в памяти](https://moviecultists.com/how-primitives-are-stored-in-java)\n- [Объявление переменных в Java и их инициализация](https://www.examclouds.com/ru/java/java-core-russian/variables)","kind":1},{"languageId":"markdown","content":"# Authors\n\n\u003cstyle\u003e\n    img[alt=avatar] {\n        width: 96px;\n        height: 96px;\n        object-fit: cover;\n        border-radius: 50%;\n    }\n\u003c/style\u003e\n\n\n\n|  | Name | About |\n|- |----- |------ |\n| ![avatar](https://github.com/MonkeyBuisness/alphabet/raw/master/.github/assets/me.jpg) | Artsem Hutarau\u003cbr /\u003e[More info](https://github.com/MonkeyBuisness) | Go developer, IT teacher |\n\n","kind":1}]}